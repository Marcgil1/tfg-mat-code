#! /Users/marcgile/miniforge3/bin/python
#! /usr/bin/python
import argparse
import csv
import pathlib
import sys
import timeit

import amplpy

AMPL_PATH = '/Users/marcgile/SourceProgs/ampl/ampl'

models = {
    'sll':   ['ampl/sll1.mod',   'ampl/sll2.mod'  ],
    'efsll': ['ampl/efsll1.mod', 'ampl/efsll2.mod'],
}

percpreferred = [10, 25, 50]

def getampl():
    amplpy.add_to_path(AMPL_PATH)
    ampl = amplpy.AMPL()
    ampl.option['solver'    ] = 'cplex'
    ampl.option['solver_msg'] = '0'
    return ampl

def parseargs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--form',    default='efsll')
    parser.add_argument('-d', '--datadir', default='01')
    args = parser.parse_args()

    return args.form, args.datadir

def getdata(form, datadir):
    datapath = pathlib.Path('data') / form / datadir
    if not datapath.is_dir():
        sys.exit(1)

    instances = {}
    for perc in percpreferred:
        percpath = datapath / str(perc)
        if not percpath.is_dir():
            sys.exit(1)

        instances[perc] = []
        for instance in percpath.iterdir():
            instances[perc] += [
                str(instance)
            ]

    return instances

def parse_solve_message(msg):
    msg = msg.split('\n')[1]
    msg = msg.split(' ' )[0]
    return int(msg)

def runsolver(form, instances):
    results = []
    for model in models[form]:
        model_res = []
        for perc in percpreferred:
            perc_res = []
            for instance in instances[perc]:
                ampl.reset()
                ampl.read     (model)
                ampl.read_data(instance)
                time = timeit.timeit(
                    stmt  =lambda: ampl.eval('solve > /dev/null;'),
                    number=1
                )

                nodes = parse_solve_message(ampl.get_value('solve_message'))
                sol   =                     ampl.get_value('Gains')

                instance_desc = pathlib.Path(instance)
                instance_desc = instance_desc.stem
                perc_res += [(instance_desc, [nodes, time, sol])]
            model_res += [(perc, perc_res)]
        model_desc = pathlib.Path(model)
        model_desc = model_desc.stem
        results += [(model_desc, model_res)]

    return results

def printrawresults(form, datadir, results):
    path  = pathlib.Path('results') / form
    if not path.is_dir():
        path.mkdir()
    path /= datadir
    path.mkdir()

    with open(path / 'raw-output.csv', 'w') as fd:
        writer = csv.DictWriter(
            f         =fd,
            fieldnames=['model', 'perc', 'instance', 'nodes', 'time', 'sol']
        )

        writer.writeheader()
        for model, model_res in results:
            for perc, perc_res in model_res:
                for instance, (nodes, time, sol) in perc_res:
                    writer.writerow({
                        'model':    model,
                        'perc':     perc,
                        'instance': instance,
                        'nodes':    nodes,
                        'time':     time,
                        'sol':      sol,
                    })

def printlatextables(form, datadir, results):
    pass

def printplots(form, datadir, results):
    pass

if __name__ == '__main__':
    ampl          = getampl  ()
    form, datadir = parseargs()
    instances     = getdata  (form, datadir)
    
    results = runsolver(form, instances)
    print(results)

    printrawresults (form, datadir, results)
    printlatextables(form, datadir, results)
    printplots      (form, datadir, results)
